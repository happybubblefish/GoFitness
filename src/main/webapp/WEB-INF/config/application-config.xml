<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">


	<!-- Jpa configuration -->
	<context:annotation-config />

	<jpa:repositories base-package="com.lin.repository" />

	<!-- go through and tells Spring to use the persistent context annotation -->
	<beans:bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<beans:bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<beans:property name="persistenceUnitName" value="punit" />
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="jpaVendorAdapter">
			<beans:bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<beans:property name="showSql" value="true" />
			</beans:bean>
		</beans:property>
		<beans:property name="jpaPropertyMap">
			<beans:map>
				<beans:entry key="hibernate.dialect"
					value="org.hibernate.dialect.MySQL5InnoDBDialect" />
				<beans:entry key="hibernate.hbm2ddl.auto" value="create" />
				<beans:entry key="hibernate.format_sql" value="true" />
			</beans:map>
		</beans:property>
	</beans:bean>

	<beans:bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<beans:property name="entityManagerFactory" ref="entityManagerFactory" />
	</beans:bean>

	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url"
			value="jdbc:mysql://localhost:3306/fitnesstracker?autoReconnect=true" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="root" />
	</beans:bean>

	<!-- Security configuration -->
	<!-- auto-config="true: accept all the default and route everything to me. 
		Also set the basic login form page for us. -->
	<!-- /** is Ant pattern style matching which is a little bit different with 
		the wildcard we use. -->
	<!-- use-expressions="false" default is true, so must use hasRole('ROLE_USER') -->


	<!-- <http auto-config="true"> <intercept-url pattern="/" access="hasRole('ROLE_USER')"/> 
		<intercept-url pattern="/welcome" access="hasRole('ROLE_USER')"/> <form-login 
		login-page="/login" default-target-url="/welcome" authentication-failure-url="/login?error" 
		username-parameter="username" password-parameter="password"/> <logout logout-success-url="/login?logout" 
		/> </http> -->



	<http auto-config="true" use-expressions="true">

		<intercept-url pattern="/login.html" access="permitAll" />
		<intercept-url pattern="/registration.html" access="permitAll" />
		<intercept-url pattern="/**" access="isAuthenticated()" />
		<intercept-url pattern="/logout.html" access="permitAll"/>
		<!-- <intercept-url pattern="/loginFailed.html" access="permitAll"/> -->

		<form-login 
		login-page="/login.html" 
		login-processing-url="/login.html"
		username-parameter="username" 
		password-parameter="password" 
		authentication-failure-url="/login.html?error=true"/>
		
		<logout logout-success-url="/logout.html" />
		<!-- authentication-success-handler-ref="myAuthenticationSuccessHandler" -->
		
	</http>
	
	<!-- <beans:bean id="myAuthenticationSuccessHandler" class="com.lin.security.MySimpleUrlAuthenticationSuccessHandler"/> -->

	<!-- More concise way -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userDetailsService">
			<!-- <password-encoder hash="md5"/> -->
			<password-encoder ref="encoder" />
			<!-- <jdbc-user-service data-source-ref="dataSource" /> -->
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="userDetailsService" class="com.lin.service.Impl.UserDetailsServiceImpl" />

	<beans:bean id="encoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<beans:constructor-arg name="strength" value="11" />
	</beans:bean>

	<!-- For database storage -->
	<!-- <authentication-manager> <authentication-provider user-service-ref="userDetailsService" 
		/> </authentication-manager> <beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl"> 
		<beans:property name="dataSource" ref="dataSource"/> </beans:bean> -->

	<!-- For in-memory uses -->
	<!-- <authentication-manager> <authentication-provider> <user-service> <user 
		name="root" password="root" authorities="ROLE_USER" /> </user-service> </authentication-provider> 
		</authentication-manager> -->


</beans:beans>
